// –õ–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
const USER_COLLECTION_PREFIX = 'user_collection_';

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–æ–¥–∞–ª—å–Ω—ã–º –æ–∫–Ω–æ–º
let currentEditItemId = null;
const modal = document.getElementById("editModal");
const closeBtn = document.querySelector(".close");

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.onload = function() {
    validateAndFixCollections();
    
    const path = window.location.pathname.split('/').pop();
    if (path === 'dashboard.html') {
        initDashboard();
    } else if (path === 'add_item.html') {
        setupAddItemForm();
    }
};

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function register() {
    const email = document.getElementById("email").value;
    const password = document.getElementById("password").value;

    if (!email || !password) {
        showStatus("status", "‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è", "error");
        return;
    }

    const userId = generateUserId(email);
    localStorage.setItem('currentUser', JSON.stringify({ 
        email, 
        userId 
    }));
    showStatus("status", "‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!", "success");
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function generateUserId(email) {
    return 'user_' + Math.abs(email.split('').reduce((hash, char) => {
        return (hash << 5) - hash + char.charCodeAt(0);
    }, 0));
}

// –í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function login() {
    const email = document.getElementById("loginEmail").value;
    const password = document.getElementById("loginPassword").value;

    if (!email || !password) {
        showStatus("loginStatus", "‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è", "error");
        return;
    }

    const userId = generateUserId(email);
    localStorage.setItem('currentUser', JSON.stringify({ 
        email, 
        userId 
    }));
    showStatus("loginStatus", "‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω! –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ...", "success");
    setTimeout(() => window.location.href = "dashboard.html", 1500);
}

// –í—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function logout() {
    localStorage.removeItem('currentUser');
    window.location.href = "index.html";
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
function checkAuth() {
    const user = JSON.parse(localStorage.getItem('currentUser'));
    const path = window.location.pathname.split('/').pop();

    if (!user && path !== 'index.html') {
        window.location.href = "index.html";
        return false;
    }

    return !!user;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è dashboard
function initDashboard() {
    if (!checkAuth()) return;

    // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    loadCollection();
    
    // –ü–æ–∏—Å–∫
    const searchBtn = document.getElementById("searchBtn");
    const resetSearchBtn = document.getElementById("resetSearchBtn");
    const searchInput = document.getElementById("searchInput");
    
    if (searchBtn) {
        searchBtn.onclick = function() {
            const searchTerm = searchInput.value.trim().toLowerCase();
            if (searchTerm) {
                searchCollection(searchTerm);
            } else {
                loadCollection();
            }
        };
        
        // –ü–æ–∏—Å–∫ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ Enter
        searchInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                searchBtn.click();
            }
        });
    }
    
    if (resetSearchBtn) {
        resetSearchBtn.onclick = function() {
            searchInput.value = "";
            loadCollection();
        };
    }
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    if (closeBtn) {
        closeBtn.onclick = function() {
            modal.style.display = "none";
        };
    }
    
    window.onclick = function(event) {
        if (event.target == modal) {
            modal.style.display = "none";
        }
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
function loadCollection() {
    if (!checkAuth()) return;

    const user = JSON.parse(localStorage.getItem('currentUser'));
    const collectionContainer = document.getElementById("collection");
    if (!collectionContainer) return;

    collectionContainer.innerHTML = "<p>–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏...</p>";

    const userCollectionKey = USER_COLLECTION_PREFIX + user.userId;
    const collection = JSON.parse(localStorage.getItem(userCollectionKey)) || [];
    
    renderCollection(collection);
}

// –ü–æ–∏—Å–∫ –ø–æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
function searchCollection(term) {
    const user = JSON.parse(localStorage.getItem('currentUser'));
    if (!user) return;

    const userCollectionKey = USER_COLLECTION_PREFIX + user.userId;
    const collection = JSON.parse(localStorage.getItem(userCollectionKey)) || [];
    
    const filtered = collection.filter(item => {
        // –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        const inName = item.name && item.name.toLowerCase().includes(term);
        // –ü–æ–∏—Å–∫ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é
        const inDescription = item.description && item.description.toLowerCase().includes(term);
        // –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–≥–∞–º
        let inTags = false;
        if (item.tags && item.tags.length > 0) {
            inTags = item.tags.some(tag => tag.toLowerCase().includes(term));
        }
        
        return inName || inDescription || inTags;
    });
    
    renderCollection(filtered);
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
function renderCollection(collection) {
    const collectionContainer = document.getElementById("collection");
    if (!collectionContainer) return;

    if (collection.length === 0) {
        collectionContainer.innerHTML = `
            <div class="no-results">
                <p>–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</p>
                <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã</p>
            </div>
        `;
        return;
    }

    collectionContainer.innerHTML = "";
    collection.forEach(item => {
        const card = document.createElement("div");
        card.className = "item-card";
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–≥–∏
        let tagsHtml = '';
        if (item.tags && item.tags.length > 0) {
            tagsHtml = `
                <div class="tags">
                    ${item.tags.map(tag => `<span class="tag">${tag.trim()}</span>`).join('')}
                </div>
            `;
        }
        
        card.innerHTML = `
            <h3>${item.name || "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"}</h3>
            ${item.description ? `<p>${item.description}</p>` : ''}
            ${tagsHtml}
            ${item.imageUrl ? `<img src="${item.imageUrl}" alt="–§–æ—Ç–æ –ø—Ä–µ–¥–º–µ—Ç–∞" class="item-image">` : ''}
            <div class="item-date">${formatDate(new Date(item.addedAt))}</div>
            <div class="item-actions">
                <button onclick="openEditModal('${item.id}')" class="btn-edit">‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</button>
                <button onclick="deleteItem('${item.id}')" class="btn-delete">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å</button>
            </div>
        `;
        collectionContainer.appendChild(card);
    });
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
function formatDate(date) {
    if (!date) return "";
    const options = { 
        year: 'numeric', 
        month: 'long', 
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
    };
    return date.toLocaleDateString("ru-RU", options);
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function openEditModal(itemId) {
    const user = JSON.parse(localStorage.getItem('currentUser'));
    if (!user) return;

    const userCollectionKey = USER_COLLECTION_PREFIX + user.userId;
    const collection = JSON.parse(localStorage.getItem(userCollectionKey)) || [];
    const item = collection.find(i => i.id == itemId);
    
    if (!item) return;

    currentEditItemId = itemId;
    document.getElementById("editName").value = item.name || "";
    document.getElementById("editDescription").value = item.description || "";
    document.getElementById("editTags").value = item.tags ? item.tags.join(", ") : "";
    
    const preview = document.getElementById("editPreview");
    if (item.imageUrl) {
        preview.src = item.imageUrl;
        preview.style.display = 'block';
    } else {
        preview.style.display = 'none';
    }

    // –°–±—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞
    document.getElementById("editStatus").innerText = "";
    
    modal.style.display = "block";
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
if (document.getElementById("saveEditBtn")) {
    document.getElementById("saveEditBtn").onclick = function() {
        const name = document.getElementById("editName").value.trim();
        const description = document.getElementById("editDescription").value.trim();
        const tagsInput = document.getElementById("editTags").value.trim();
        const imageInput = document.getElementById("editImage");
        const file = imageInput.files[0];
        const status = document.getElementById("editStatus");

        if (!name) {
            showStatus("editStatus", "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞", "warning");
            return;
        }

        const user = JSON.parse(localStorage.getItem('currentUser'));
        if (!user || !currentEditItemId) return;

        const userCollectionKey = USER_COLLECTION_PREFIX + user.userId;
        const collection = JSON.parse(localStorage.getItem(userCollectionKey)) || [];
        const itemIndex = collection.findIndex(i => i.id == currentEditItemId);
        
        if (itemIndex === -1) return;

        showStatus("editStatus", "‚è≥ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π...", "info");

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–≥–æ–≤
        const tags = tagsInput ? 
            tagsInput.split(',')
                .map(tag => tag.trim())
                .filter(tag => tag) 
            : [];

        if (file) {
            const reader = new FileReader();
            reader.onload = function(e) {
                collection[itemIndex].imageUrl = e.target.result;
                saveUpdatedItem(collection, itemIndex, name, description, tags, status);
            };
            reader.readAsDataURL(file);
        } else {
            saveUpdatedItem(collection, itemIndex, name, description, tags, status);
        }
    };
}

function saveUpdatedItem(collection, index, name, description, tags, statusElement) {
    collection[index] = {
        ...collection[index],
        name,
        description,
        tags,
        addedAt: new Date().toISOString()
    };
    
    saveItem(collection[index], statusElement);
}

// –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
function deleteItem(itemId) {
    if (!confirm("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç?")) return;

    try {
        const user = JSON.parse(localStorage.getItem('currentUser'));
        if (!user) {
            throw new Error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω");
        }

        const userCollectionKey = USER_COLLECTION_PREFIX + user.userId;
        const collection = JSON.parse(localStorage.getItem(userCollectionKey)) || [];
        const updatedCollection = collection.filter(item => String(item.id) !== String(itemId));
        
        localStorage.setItem(userCollectionKey, JSON.stringify(updatedCollection));
        
        // –ü–æ–∫–∞–∂–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        showTempMessage("‚úÖ –ü—Ä–µ–¥–º–µ—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!");
        
        // –û–±–Ω–æ–≤–∏–º —Å–ø–∏—Å–æ–∫
        loadCollection();
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:", error);
        showTempMessage("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: " + error.message, "error");
    }
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
function setupAddItemForm() {
    if (!checkAuth()) return;

    const imageInput = document.getElementById("image");
    const preview = document.getElementById("preview");
    const addButton = document.getElementById("addItemBtn");
    const status = document.getElementById("addStatus");

    if (!addButton) return;

    imageInput.addEventListener('change', function(e) {
        const file = e.target.files[0];
        if (file) {
            const reader = new FileReader();
            reader.onload = function(e) {
                preview.src = e.target.result;
                preview.style.display = 'block';
            };
            reader.readAsDataURL(file);
        } else {
            preview.style.display = 'none';
        }
    });

    addButton.onclick = function() {
        const name = document.getElementById("name").value.trim();
        const description = document.getElementById("description").value.trim();
        const tagsInput = document.getElementById("tags").value.trim();
        const file = imageInput.files[0];

        if (!name) {
            showStatus("addStatus", "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞", "warning");
            return;
        }

        showStatus("addStatus", "‚è≥ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞...", "info");

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–≥–æ–≤
        const tags = tagsInput ? 
            tagsInput.split(',')
                .map(tag => tag.trim())
                .filter(tag => tag) 
            : [];

        const newItem = {
            id: Date.now(),
            name,
            description,
            tags,
            addedAt: new Date().toISOString(),
            imageUrl: null
        };

        if (file) {
            const reader = new FileReader();
            reader.onload = function(e) {
                newItem.imageUrl = e.target.result;
                saveItem(newItem, status);
            };
            reader.readAsDataURL(file);
        } else {
            saveItem(newItem, status);
        }
    };
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ)
function saveItem(item, statusElement) {
    try {
        const user = JSON.parse(localStorage.getItem('currentUser'));
        if (!user) {
            throw new Error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω");
        }

        const userCollectionKey = USER_COLLECTION_PREFIX + user.userId;
        let collection = JSON.parse(localStorage.getItem(userCollectionKey)) || [];
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —ç–ª–µ–º–µ–Ω—Ç —Å —Ç–∞–∫–∏–º ID
        const existingItemIndex = collection.findIndex(i => i.id === item.id);
        
        if (existingItemIndex >= 0) {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç
            collection[existingItemIndex] = item;
        } else {
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
            collection.unshift(item);
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é
        localStorage.setItem(userCollectionKey, JSON.stringify(collection));
        
        showStatus(statusElement.id, "‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!", "success");
        
        // –ï—Å–ª–∏ —ç—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ dashboard
        if (window.location.pathname.endsWith("add_item.html")) {
            setTimeout(() => {
                window.location.href = "dashboard.html";
            }, 1500);
        } else {
            // –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            setTimeout(() => {
                modal.style.display = "none";
                loadCollection();
            }, 1500);
        }
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:", error);
        showStatus(statusElement.id, "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: " + error.message, "error");
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
function validateAndFixCollections() {
    const user = JSON.parse(localStorage.getItem('currentUser'));
    if (!user) return;

    const userCollectionKey = USER_COLLECTION_PREFIX + user.userId;
    let collection = JSON.parse(localStorage.getItem(userCollectionKey)) || [];
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏
    collection = collection.filter(item => {
        return item && typeof item === 'object' && 'id' in item;
    });
    
    // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —É –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –µ—Å—Ç—å –º–∞—Å—Å–∏–≤ —Ç–µ–≥–æ–≤
    collection = collection.map(item => {
        if (!item.tags || !Array.isArray(item.tags)) {
            item.tags = [];
        }
        return item;
    });
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é
    localStorage.setItem(userCollectionKey, JSON.stringify(collection));
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
function showStatus(elementId, message, type = "info") {
    const element = document.getElementById(elementId);
    if (!element) return;
    
    element.innerText = message;
    element.style.display = "block";
    
    // –û—á–∏—â–∞–µ–º –∫–ª–∞—Å—Å—ã
    element.className = "status-message";
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    switch(type) {
        case "success":
            element.classList.add("success");
            element.style.backgroundColor = "#d4edda";
            element.style.color = "#155724";
            break;
        case "error":
            element.classList.add("error");
            element.style.backgroundColor = "#f8d7da";
            element.style.color = "#721c24";
            break;
        case "warning":
            element.classList.add("warning");
            element.style.backgroundColor = "#fff3cd";
            element.style.color = "#856404";
            break;
        case "info":
        default:
            element.classList.add("info");
            element.style.backgroundColor = "#d1ecf1";
            element.style.color = "#0c5460";
            break;
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
function showTempMessage(message, type = "success") {
    const container = document.getElementById("collection");
    if (!container) return;
    
    const messageDiv = document.createElement("div");
    messageDiv.className = "status-message";
    
    switch(type) {
        case "success":
            messageDiv.style.backgroundColor = "#d4edda";
            messageDiv.style.color = "#155724";
            break;
        case "error":
            messageDiv.style.backgroundColor = "#f8d7da";
            messageDiv.style.color = "#721c24";
            break;
        default:
            messageDiv.style.backgroundColor = "#d1ecf1";
            messageDiv.style.color = "#0c5460";
    }
    
    messageDiv.innerText = message;
    messageDiv.style.margin = "15px 0";
    messageDiv.style.padding = "15px";
    messageDiv.style.borderRadius = "6px";
    messageDiv.style.textAlign = "center";
    
    container.prepend(messageDiv);
    
    // –£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
        messageDiv.remove();
    }, 3000);
}